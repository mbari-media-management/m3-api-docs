openapi: 3.0.0
servers:
  - url: 'https://virtserver.swaggerhub.com/mbari/annosaurus/1.0.0'
info:
  description: Video Annotation API
  version: 1.0.0-oas3
  title: annosaurus
  contact:
    email: brian@mbari.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Developer
    description: Developer operations
  - name: Analysis
    description: Analysis operations
  - name: AncillaryDatum
    description: CachedAncillaryDatum operations
  - name: Annotation
    description: Annotation operations
  - name: Image
    description: Image operations
  - name: ImagedMoment
    description: ImagedMoment operations
  - name: ImageReference
    description: ImageReference operations
  - name: Association
    description: Association operations
  - name: VideoReference
    description: CachedVideoReferenceInfo operations
  - name: Observation
    description: Observation operations
  - name: Health
    description: Health operations
paths:
  /auth:
    post:
      tags:
        - Developer
      summary: Authorize using an API key to retrieve a JWT.
      operationId: authorize
      description: Authorize using an API key to retrieve a JWT.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Returns an JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
  '/associations/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: Association UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Association
      summary: Retrieve a single association
      operationId: findAssociation
      description: Retrieve a single association by its UUID
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '400':
          description: bad input parameter
        '404':
          description: Not found (no matching UUID)
    put:
      summary: Update an Association by its UUID
      description: Update an Association by its UUID
      operationId: updateAssociation
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                observation_uuid:
                  type: string
                  format: uuid
                link_name:
                  type: string
                to_concept:
                  type: string
                link_value:
                  type: string
                mime_type:
                  type: string
      responses:
        '200':
          description: Updated Association
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '400':
          description: Please provide the UUID of the Association
        '404':
          description: No matching Association found
      tags:
        - Association
      security:
        - BearerAuth: []
    delete:
      summary: Delete an Association
      description: Delete an Association
      operationId: deleteAssociation
      responses:
        '204':
          description: Deleted
        '412':
          description: Failed. No matching Association found
      tags:
        - Association
      security:
        - BearerAuth: []
  '/associations/{video_reference_uuid}/{link_name}':
    get:
      tags:
        - Association
      summary: Find all usages of a specific association in a video
      operationId: findAssociationsByVideoReferenceAndLinkName
      description: Find all usages of a specific association in a video by its link name and Video Reference UUID
      parameters:
        - in: path
          name: video_reference_uuid
          description: The video_reference_uuid of interest
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: link_name
          description: The link name portion of the associations to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Association'
        '400':
          description: bad input parameter
        '404':
          description: Not found (no matching UUID)
  '/annotations/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: pass the observation UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Annotation
      summary: Find an Annotation
      operationId: findAnnotation
      description: |
        By passing in the observation UUID, you can retrieve a single annotation
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
        '400':
          description: Bad input parameter
        '404':
          description: Not found (no matching UUID)
    put:
      tags:
        - Annotation
      summary: Update an existing Annotation
      operationId: updateAnnotation
      description: Update an existing Annotation
      security:
        - BearerAuth: []
      responses:
        '201':
          description: item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                video_reference_uuid:
                  type: string
                  format: uuid
                concept:
                  type: string
                observer:
                  type: string
                observation_timestamp:
                  type: string
                  format: date-time
                timecode:
                  type: string
                elapsed_time_millis:
                  type: integer
                recorded_timestamp:
                  type: string
                  format: date-time
                duration_millis:
                  type: integer
                group:
                  type: string
                activity:
                  type: string
  /annotations:
    post:
      tags:
        - Annotation
      summary: Create a new Annotation
      operationId: createAnnotation
      description: 'Adds an annotation to the system. Note that at least one video index (timecode, elpased_time_millis, recorded_timestamp) is required.'
      security:
        - BearerAuth: []
      responses:
        '201':
          description: item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                video_reference_uuid:
                  type: string
                  format: uuid
                concept:
                  type: string
                observer:
                  type: string
                observation_timestamp:
                  type: string
                  format: date-time
                timecode:
                  type: string
                elapsed_time_millis:
                  type: integer
                recorded_timestamp:
                  type: string
                  format: date-time
                duration_millis:
                  type: integer
                group:
                  type: string
                activity:
                  type: string
              required:
                - video_reference_uuid
                - concept
                - observer
  /annotations/bulk:
    post:
      tags:
        - Annotation
      summary: Create Annotations in bulk
      operationId: createAnnotationsBulk
      description: Create Annotations in bulk
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success. Items created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
    put:
      summary: Update Annotations in bulk
      description: Update Annotations in bulk
      operationId: updateAnnotationsBulk
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
      responses:
        '200':
          description: Updated Annotations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
        '400':
          description: 'Updating Annotations in bulk only accepts JSON body (Content-Type: application/json)'
      tags:
        - Annotation
      security:
        - BearerAuth: []
  '/annotations/videoreference/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: The video-reference UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Annotation
      summary: Find all Annotations for a given Video Reference
      operationId: findAnnotationsByVideoReferenceUuid
      description: 'Using a given Video Reference UUID, find all Annotations for that video'
      parameters:
        - in: query
          name: limit
          description: The number of items to return
          schema:
            type: integer
        - in: query
          name: offset
          description: The number of items to skip before starting to collect the result set
          schema:
            type: integer
      responses:
        '200':
          description: Annotations for the given Video Reference
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
        '404':
          description: No match was found
  '/annotations/imagereference/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: The image-reference UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Annotation
      summary: Find Annotations by a contained Image Reference
      operationId: findAnnotationsByImageReference
      description: 'Using a given Image Reference UUID, find all Annotations for that image'
      responses:
        '200':
          description: Search results found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
        '404':
          description: No match was found
  '/imagereferences/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: Image Reference UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - ImageReference
      summary: Find an Image Reference by its UUID
      operationId: findImageReferenceByUuid
      description: Find an Image Reference by its UUID
      responses:
        '200':
          description: Matched Image Reference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageReference'
        '404':
          description: No matched Image Reference
    put:
      summary: Update an Image Reference
      description: Update an Image Reference
      operationId: updateImageReference
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: url
                  example: 'http://search.mbari.org/ARCHIVE/frameGrabs/Doc%20Ricketts/images/0953/00_00_00_00.png'
                format:
                  type: string
                  example: image/png
                width_pixels:
                  type: integer
                  example: 1920
                height_pixels:
                  type: integer
                  example: 1080
                description:
                  type: string
                  example: uncompressed image
                imaged_moment_uuid:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Matched Image Reference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageReference'
        '404':
          description: No matched Image Reference
      tags:
        - ImageReference
      security:
        - BearerAuth: []
    delete:
      summary: Delete an Image Reference
      description: Delete an Image Reference
      operationId: deleteImageReference
      responses:
        '204':
          description: Deleted
        '404':
          description: No matched Image Reference
      tags:
        - ImageReference
      security:
        - BearerAuth: []
  /images:
    post:
      tags:
        - Image
      summary: Registers a single image
      operationId: createImage
      description: 'Adds an image to the system. Note that at least one video index (timecode, elpased_time_millis, recorded_timestamp) is required.'
      security:
        - BearerAuth: []
      responses:
        '201':
          description: item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                video_reference_uuid:
                  type: string
                  format: uuid
                timecode:
                  type: string
                elapsed_time_millis:
                  type: integer
                recorded_timestamp:
                  type: string
                  format: date
                url:
                  type: string
                  format: url
                width:
                  type: integer
                height:
                  type: integer
                description:
                  type: string
                format:
                  type: string
              required:
                - video_reference_uuid
                - url
  '/images/{uuid}':
    get:
      tags:
        - Image
      summary: Retrieve image information by image reference UUID
      operationId: findImageByUuid
      description: 'Using a given image-reference uuid, find its metadata'
      parameters:
        - in: path
          name: uuid
          description: The image-reference UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '404':
          description: No match was found
    put:
      tags:
        - Image
      summary: Update a single image
      operationId: updateImage
      description: Update a single image
      parameters:
        - in: path
          name: uuid
          description: pass the observation UUID
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '201':
          description: item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  format: uuid
                video_reference_uuid:
                  type: string
                  format: uuid
                concept:
                  type: string
                observer:
                  type: string
                observation_timestamp:
                  type: string
                  format: date-time
                timecode:
                  type: string
                elapsed_time_millis:
                  type: integer
                recorded_timestamp:
                  type: string
                  format: date-time
                duration_millis:
                  type: integer
                group:
                  type: string
                activity:
                  type: string
              required:
                - video_reference_uuid
  '/images/videoreference/{uuid}':
    get:
      tags:
        - Image
      summary: Return all images for a given video
      operationId: findImagesByVideoReferenceUuid
      description: 'Using a giving video-reference UUID, find all images for that video'
      parameters:
        - in: path
          name: uuid
          description: The video-reference UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
        '404':
          description: No match was found
  '/images/url/{url}':
    get:
      tags:
        - Image
      summary: Return image information by image URL
      operationId: findImageByUrl
      description: 'Using the images URL, retrieve the metadata for the image'
      parameters:
        - in: path
          name: url
          description: The URL for the image. It should be url-encoded (i.e. escaped)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '404':
          description: No match was found
  /imagedmoments:
    get:
      tags:
        - ImagedMoment
      summary: Retrieve all imaged moments
      operationId: findAllImagedMoments
      description: find all imaged moments in the data store
      parameters:
        - in: query
          name: limit
          description: The number of items to return (default is 1000)
          schema:
            type: integer
        - in: query
          name: offset (default is 0)
          description: The number of items to skip before starting to collect the result set
          schema:
            type: integer
      responses:
        '200':
          description: search results found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImagedMoment'
        '404':
          description: No match was found
  /imagedmoments/counts:
    get:
      tags:
        - ImagedMoment
      summary: Count Imaged Moments for all Video References
      operationId: countImagedMoments
      description: Count Imaged Moments for all Video References
      parameters: []
      responses:
        '200':
          description: Imaged Moment counts by Video Reference
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObservationCount'
    parameters: []
  '/imagedmoments/videoreference/chunked/{uuid}':
    get:
      tags:
        - ImagedMoment
      summary: Find Imaged Moments by Video Reference
      operationId: findChunkedImagedMomentsByVideoReference
      description: 'Find Imaged Moments for a given Video Reference, chunked'
      parameters:
        - in: query
          name: limit
          description: The number of items to return
          schema:
            type: integer
        - in: query
          name: offset
          description: The number of items to skip before starting to collect the result set
          schema:
            type: integer
        - schema:
            type: integer
          in: query
          name: pagesize
          description: 'The page size (default: 50)'
        - schema:
            type: integer
          in: query
          name: timeout
          description: 'The request timeout, in seconds (default: 20)'
      responses:
        '200':
          description: search results found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImagedMoment'
        '400':
          description: Please provide a Video Reference UUID
        '404':
          description: No match was found
    parameters:
      - schema:
          type: string
          format: uuid
        name: uuid
        in: path
        required: true
        description: Video Reference UUID
  '/imagedmoments/concept/{name}':
    get:
      tags:
        - ImagedMoment
      summary: Find Imaged Moments by observed concept
      operationId: findImagedMomentsByObservedConcept
      description: Find all Imaged Moments with one or more Observations of a given concept
      parameters:
        - in: query
          name: limit
          description: The number of items to return
          schema:
            type: integer
        - in: query
          name: offset
          description: The number of items to skip before starting to collect the result set
          schema:
            type: integer
      responses:
        '200':
          description: search results found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImagedMoment'
        '400':
          description: Please provide a concept name
        '404':
          description: No match was found
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
        description: Concept name
  '/imagedmoments/concept/count/{name}':
    get:
      tags:
        - ImagedMoment
      summary: Find Imaged Moments by observed concept
      operationId: countImagedMomentsByObservedConcept
      description: Count all Imaged Moments with one or more Observations of a given concept
      parameters: []
      responses:
        '200':
          description: Imaged Moment count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptCount'
        '400':
          description: Please provide a concept name
        '404':
          description: No match was found
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
        description: Concept name
  '/imagedmoments/concept/images/{name}':
    get:
      tags:
        - ImagedMoment
      summary: Find Imaged Moments by observed concept
      operationId: findImagedMomentsWithImagesByObservedConcept
      description: 'Find all Imaged Moments with one or more Observations of a given concept, excluding Imaged Moments without any Image References'
      parameters:
        - in: query
          name: limit
          description: The number of items to return
          schema:
            type: integer
        - in: query
          name: offset
          description: The number of items to skip before starting to collect the result set
          schema:
            type: integer
      responses:
        '200':
          description: search results found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImagedMoment'
        '400':
          description: Please provide a concept name
        '404':
          description: No match was found
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
        description: Concept name
  '/imagedmoments/concept/images/count/{name}':
    get:
      tags:
        - ImagedMoment
      summary: Find Imaged Moments by observed concept
      operationId: countImagedMomentsWithImagesByObservedConcept
      description: 'Count all Imaged Moments with one or more Observations of a given concept, excluding Imaged Moments without any Image References'
      parameters: []
      responses:
        '200':
          description: Imaged Moment count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptCount'
        '400':
          description: Please provide a concept name
        '404':
          description: No match was found
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
        description: Concept name
  '/imagedmoments/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: The imaged moment UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - ImagedMoment
      summary: Retrieve a single imaged moment by its UUID
      operationId: findImagedMomentByUuid
      description: Retrieve a single imaged moment by its primary key
      responses:
        '200':
          description: the imaged moment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagedMoment'
        '400':
          description: Please provide a UUID
        '404':
          description: No match was found
    put:
      summary: Update Imaged Moment
      operationId: updateImagedMoment
      responses:
        '200':
          description: Updated Imaged Moment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagedMoment'
        '400':
          description: Please provide a UUID
      tags:
        - ImagedMoment
      description: Update an Imaged Moment
      parameters:
        - schema:
            type: string
          in: query
          name: timecode
          description: Tape timecode
        - schema:
            type: integer
          in: query
          name: elapsed_time_millis
          description: Elapsed time in milliseconds
        - schema:
            type: string
            format: date-time
          in: query
          name: recorded_timestamp
          description: Recorded timestamp
        - schema:
            type: string
            format: uuid
          in: query
          name: video_reference_uuid
          description: Video Reference UUID
      security:
        - BearerAuth: []
    delete:
      summary: Delete Imaged Moment
      operationId: deleteImagedMoment
      responses:
        '204':
          description: Deleted
        '400':
          description: Please provide the UUID of the Imaged Moment
        '404':
          description: No matched Imaged Moment found
      description: Delete an Imaged Moment
      security:
        - BearerAuth: []
      tags:
        - ImagedMoment
  '/imagedmoments/modified/{start}/{end}':
    get:
      tags:
        - ImagedMoment
      summary: Retrieve all imagedmoments that have been modified between dates
      operationId: findImagedMomentsBetweenDates
      description: Find all imagedmoments that habe annotations that were created or modified between two dates
      parameters:
        - in: query
          name: limit
          description: The number of items to return (default is 1000)
          schema:
            type: integer
        - in: query
          name: offset (default is 0)
          description: The number of items to skip before starting to collect the result set
          schema:
            type: integer
      responses:
        '200':
          description: imagedmoments between two dates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImagedMoment'
    parameters:
      - schema:
          type: string
          format: date-time
        name: start
        in: path
        required: true
        description: Start date
      - schema:
          type: string
          format: date-time
        name: end
        in: path
        required: true
        description: End date
  '/imagedmoments/videoreference/modified/{uuid}/{date}':
    get:
      tags:
        - ImagedMoment
      summary: Retrieve Imaged Moments modified before date by Video Reference
      operationId: findImagedMomentsBeforeDateByVideoReference
      description: 'Find all Imaged Moments that have Annotations that were created or modified before a given date, for a given Video Reference'
      responses:
        '200':
          description: Matched Imaged Moments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImagedMoment'
        '400':
          description: 'Please provide a Video Reference UUID and a date (yyyy-mm-ddThh:mm:ssZ)'
    parameters:
      - schema:
          type: string
          format: date-time
        name: date
        in: path
        required: true
        description: Modified date
      - schema:
          type: string
        name: uuid
        in: path
        required: true
        description: Video Reference UUID
  '/imagedmoments/modified/count/{start}/{end}':
    get:
      tags:
        - ImagedMoment
      summary: Retrieve a count of imagedmoments that have been modified between dates
      operationId: countImagedMomentsBetweenDates
      description: Count all imagedmoments that have annotations that were created or modified between two dates
      responses:
        '200':
          description: imagedmoments between two dates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImagedMomentCount'
    parameters:
      - schema:
          type: string
          format: date-time
        name: start
        in: path
        required: true
        description: Start date
      - schema:
          type: string
          format: date-time
        name: end
        in: path
        required: true
        description: End date
  '/observations/{uuid}':
    get:
      tags:
        - Observation
      summary: Retrieve a single observation by its UUID
      operationId: findObservationByUuid
      description: Retreive a single observation by its primary key
      parameters:
        - in: path
          name: uuid
          description: The observation UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: the observation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
        '400':
          description: Please provide a UUID
        '404':
          description: No match was found
    delete:
      tags:
        - Observation
        - Annotation
      summary: Delete Observation
      operationId: deleteObservation
      description: Delete a single Observation by its UUID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: uuid
          description: The observation UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Deleted
        '400':
          description: Please provide a UUID
        '404':
          description: No match was found
    put:
      tags:
        - Observation
      summary: Modify a single observation
      operationId: updateObservationByUuid
      description: Modify/Update a single observation by its primary key
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: uuid
          description: The observation UUID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                imaged_moment_uuid:
                  type: string
                  format: uuid
                concept:
                  type: string
                observer:
                  type: string
                observation_timestamp:
                  type: string
                  format: date-time
                duration_millis:
                  type: integer
                group:
                  type: string
                activity:
                  type: string
      responses:
        '200':
          description: the observation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
        '400':
          description: A UUID parameter is required
        '404':
          description: No match was found
  /observations/activities:
    get:
      tags:
        - Observation
      summary: Retrieve all distinct activities used by any annotations
      operationId: findObservationActivities
      description: Retrieve all distinct activities used by any annotations
      responses:
        '200':
          description: activities
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  '/observations/concept/count/{concept}':
    get:
      tags:
        - Observation
      summary: Retrieve the number of usages of a concept
      operationId: countObservationsByConcept
      description: Retrieve a count of the number of usages of a concept in the entire data store
      parameters:
        - in: path
          name: concept
          description: The concept name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Count of observations using the given concept
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptCount'
        '400':
          description: Please provide a concept to search for
  /observations/concept/rename:
    put:
      tags:
        - Observation
        - Annotation
      summary: Rename all annotations using a given concept to a different one
      operationId: renameObservations
      description: Rename observations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: The number of concepts renamed
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/ConceptRename'
        '400':
          description: Please provide the concept being replaced and the replacement concept
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                old:
                  type: string
                new:
                  type: string
  /observations/concepts:
    get:
      tags:
        - Observation
      summary: Retrieve all concepts used in annotations
      operationId: findObservationConcepts
      description: Retrieve all concepts used in annotations
      responses:
        '200':
          description: A list of ditinct concept names used in annotations
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  '/observations/concepts/{uuid}':
    get:
      tags:
        - Observation
      summary: Retrieve all concepts used in annotations for a video
      operationId: findObservationConceptsByVideoReference
      description: Retrieve all concepts used in annotations for a video
      parameters:
        - in: path
          name: uuid
          description: The video reference UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A list of distinct concept names used in annotations
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Please provide a Video Reference UUID
  /observations/delete:
    post:
      tags:
        - Observation
        - Annotation
      summary: Delete one or more observations
      operationId: bulkDeleteObservationsByUuids
      description: Delete one or more observations using their UUIDs in the post body (as json)
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
      responses:
        '201':
          description: Successfully deleted observations
        '400':
          description: Failed to delete observations
  /observations/groups:
    get:
      tags:
        - Observation
      summary: Retrieve all distinct groups used by any annotations
      operationId: findObservationGroups
      description: Retrieve all distinct groups used by any annotations
      responses:
        '200':
          description: groups
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  '/observations/association/{uuid}':
    get:
      tags:
        - Observation
        - Association
      summary: Retrive an observation by one of it's associations
      operationId: findObservationByAssociationUuid
      description: Retrieve an observation by one its associations
      parameters:
        - in: path
          name: uuid
          description: The association UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
        '400':
          description: Please provide an Association UUID
        '404':
          description: No match was found
  '/observations/videoreference/{uuid}':
    get:
      tags:
        - Observation
      summary: Return all observations for a given video
      operationId: findObservationsByVideoReferenceUuid
      description: 'Using a giving video-reference UUID, find all observations for that video'
      parameters:
        - in: path
          name: uuid
          description: The video-reference UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Observation'
        '400':
          description: Please provide a Video Reference UUID
        '404':
          description: No match was found
  '/observations/videoreference/count/{uuid}':
    get:
      tags:
        - Observation
      summary: Return a count of observations for a given video
      operationId: countObservationsByVideoReferenceUuid
      description: 'Using a giving video-reference UUID, find all observations for that video'
      parameters:
        - in: path
          name: uuid
          description: The video-reference UUID
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: start
          description: Start timestamp
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: end
          description: End timestamp
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Count of observations for a given video reference uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationCount'
        '400':
          description: Please provide a Video Reference UUID
  '/observations/concept/images/count/{concept}':
    get:
      summary: Return a count of observations with images for a given concept
      description: Return a count of observations with images for a given concept
      operationId: countObservationsWithImagesByConcept
      parameters:
        - in: path
          name: concept
          description: The concept name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Count of observations with images for a given concept
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptCount'
        '400':
          description: Please provide a concept to search for
      tags:
        - Observation
  /observations/counts:
    get:
      summary: Count all groups by video reference UUID
      description: Count all groups by video reference UUID
      operationId: countAllGroupsByVideoReferenceUUID
      responses:
        '200':
          description: List of observation counts by video reference UUID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObservationCount'
      tags:
        - Observation
  '/observations/delete/duration/{uuid}':
    put:
      summary: Delete an observation duration by UUID
      description: Delete an observation duration by UUID
      operationId: deleteObservationDurationByUuid
      parameters:
        - in: path
          name: uuid
          description: The observation UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Updated observation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
        '400':
          description: A UUID paramter is required
        '404':
          description: No matching observation
      tags:
        - Observation
      security:
        - BearerAuth: []
  /associations:
    post:
      summary: Create a new Association
      description: Create a new Association
      operationId: createAssociation
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                observation_uuid:
                  type: string
                  format: uuid
                link_name:
                  type: string
                to_concept:
                  type: string
                mime_type:
                  type: string
                association_uuid:
                  type: string
                  format: uuid
              required:
                - observation_uuid
                - link_name
      responses:
        '200':
          description: New Association
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '400':
          description: Please provide an Observation UUID and a link name
      tags:
        - Association
      security:
        - BearerAuth: []
  /associations/bulk:
    put:
      summary: Create Associations in bulk
      description: Create Associations in bulk
      operationId: createAssociationsBulk
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Association'
      responses:
        '200':
          description: New Associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Association'
        '412':
          description: 'Bulk Association creation only accepts JSON (i.e. Content-Type: application/json)'
      tags:
        - Association
      security:
        - BearerAuth: []
  /associations/delete:
    post:
      summary: Delete Associations in bulk
      description: Delete Associations in bulk
      operationId: deleteAssociationsBulk
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
      responses:
        '200':
          description: Deletion success
        '404':
          description: No Association UUIDs were provided as JSON
        '412':
          description: 'Bulk Association deletion only accepts JSON (i.e. Content-Type: application/json)'
      tags:
        - Association
      security:
        - BearerAuth: []
  '/associations/toconcept/count/{concept}':
    parameters:
      - in: path
        name: concept
        description: to_concept value
        required: true
        schema:
          type: string
    get:
      summary: Count associations with a given to_concept value
      description: Count associations with a given to_concept value
      operationId: countAssociationsByToConcept
      responses:
        '200':
          description: to_concept count (concept is actually the to_concept)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptCount'
        '400':
          description: Please provide a concept to search for
      tags:
        - Association
  /associations/toconcept/rename:
    put:
      summary: Rename a to_concept
      description: Rename a to_concept
      operationId: renameToConcept
      parameters:
        - in: query
          name: old
          description: The concept being replaced
          required: true
          schema:
            type: string
        - in: query
          name: new
          description: The replacement concept
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rename count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptRename'
        '400':
          description: Please provide the concept being replaced and the replacement concept
      tags:
        - Association
      security:
        - BearerAuth: []
  /associations/conceptassociations:
    post:
      summary: Find by concept Association request
      description: Find by concept Association request
      operationId: findByConceptAssociationRequest
      parameters:
        - in: query
          name: limit
          description: Limit
          schema:
            type: integer
        - in: query
          name: offset
          description: Limit
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConceptAssociationRequest'
      responses:
        '200':
          description: Concept Association results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptAssociationResponse'
        '400':
          description: 'Querying by concept Association only accepts a JSON body (i.e. Content-Type: application/json)'
      tags:
        - Association
  /videoreferences:
    get:
      summary: Find all Cached Video References
      description: Find all Cached Video References
      operationId: findAllVideoReferences
      parameters:
        - in: query
          name: limit
          description: Limit
          required: false
          schema:
            type: integer
        - in: query
          name: offset
          description: Offset
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of Video References
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CachedVideoReferenceInfo'
      tags:
        - VideoReference
    post:
      summary: Create a new Cached Video Reference
      description: Create a new Cached Video Reference
      operationId: createCachedVideoReference
      requestBody:
        content:
          text/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                video_reference_uuid:
                  type: string
                  format: uuid
                mission_contact:
                  type: string
                mission_id:
                  type: string
                platform_name:
                  type: string
              required:
                - video_reference_uuid
                - mission_id
                - platform_name
      responses:
        '200':
          description: Created Cached Video Reference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CachedVideoReferenceInfo'
        '400':
          description: 'video_reference_uuid, mission_id, and platform_name are required'
      tags:
        - VideoReference
      security:
        - BearerAuth: []
  '/videoreferences/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: Cached Video Reference UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a Cached Video Reference by its UUID
      description: Get a Cached Video Reference by its UUID
      operationId: findCachedVideoReference
      responses:
        '200':
          description: Cached Video Reference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CachedVideoReferenceInfo'
        '400':
          description: Please provide a UUID
        '404':
          description: No matching Cached Video Reference found
      tags:
        - VideoReference
    put:
      summary: Update a Cached Video Reference
      description: Update a Cached Video Reference
      operationId: updateCachedVideoReference
      requestBody:
        content:
          text/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                video_reference_uuid:
                  type: string
                  format: uuid
                mission_contact:
                  type: string
                mission_id:
                  type: string
                platform_name:
                  type: string
      responses:
        '200':
          description: Updated Cached Video Reference
        '400':
          description: A UUID parameter is required
        '404':
          description: No matching Cached Video Reference found
      tags:
        - VideoReference
      security:
        - BearerAuth: []
    delete:
      summary: Delete a Cached Video Reference
      description: Delete a Cached Video Reference
      operationId: deleteCachedVideoReference
      responses:
        '204':
          description: Deleted
        '400':
          description: A UUID paramter is required
        '404':
          description: No matching Cached Video Reference found
      tags:
        - VideoReference
      security:
        - BearerAuth: []
  /videoreferences/videoreferences:
    get:
      summary: Find all Video Reference UUIDs
      description: Find all Video Reference UUIDs
      operationId: findAllVideoReferenceUUIDs
      responses:
        '200':
          description: List of Video Reference UUIDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
      tags:
        - VideoReference
  '/videoreferences/videoreference/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: Video Reference UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Find a Cached Video Reference by its Video Reference UUID
      description: Find a Cached Video Reference by its Video Reference UUID
      operationId: findCachedVideoReferenceByVideoReferenceUuid
      responses:
        '200':
          description: Matched Cached Video Reference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CachedVideoReferenceInfo'
        '400':
          description: Please provide a Video Reference UUID
        '404':
          description: No matching Cached Video Reference found
      tags:
        - VideoReference
  /videoreferences/missionids:
    get:
      summary: Find all mission IDs
      description: Find all mission IDs
      operationId: findAllMissionIDs
      responses:
        '200':
          description: List of mission IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags:
        - VideoReference
  '/videoreferences/missionid/{id}':
    parameters:
      - in: path
        name: id
        description: Mission ID
        required: true
        schema:
          type: string
    get:
      summary: Find Cached Video References by mission ID
      description: Find Cached Video References by mission ID
      operationId: findCachedVideoReferencesByMissionID
      responses:
        '200':
          description: List of matched Cached Video References
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CachedVideoReferenceInfo'
        '404':
          description: Please provide a mission ID
      tags:
        - VideoReference
  /videoreferences/missioncontacts:
    get:
      summary: Find all mission contacts
      description: Find all mission contacts
      operationId: findAllMissionContacts
      responses:
        '200':
          description: List of mission contacts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags:
        - VideoReference
  '/videoreferences/missioncontact/{name}':
    parameters:
      - in: path
        name: name
        description: Mission contact name
        required: true
        schema:
          type: string
    get:
      summary: Find Cached Video References by mission contact
      description: Find Cached Video References by mission contact
      operationId: findCachedVideoReferencesByMissionContact
      responses:
        '200':
          description: List of matched Cached Video References
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Please provide a mission contact
      tags:
        - VideoReference
  /analysis/histogram/depth:
    post:
      summary: Compute a depth histogram
      description: Compute a depth histogram
      operationId: computeDepthHistogram
      parameters:
        - in: query
          name: size
          description: 'Bin size in meters (default: 50)'
          required: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryConstraints'
      responses:
        '200':
          description: Depth histogram Query Constraints Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/QueryConstraintsResponse'
                  - type: object
                    properties:
                      content:
                        $ref: '#/components/schemas/DepthHistogram'
        '400':
          description: Valid query constraints are required
      tags:
        - Analysis
  /analysis/histogram/time:
    post:
      summary: Compute a time histogram
      description: Compute a time histogram
      operationId: computeTimeHistogram
      parameters:
        - in: query
          name: size
          description: 'Bin size in days (default: 30)'
          required: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryConstraints'
      responses:
        '200':
          description: Depth histogram Query Constraints Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/QueryConstraintsResponse'
                  - type: object
                    properties:
                      content:
                        $ref: '#/components/schemas/TimeHistogram'
        '400':
          description: Valid query constraints are required
      tags:
        - Analysis
  /annotations/concurrent/count:
    post:
      summary: Count Annotations by Concurrent Request
      description: Count Annotations by Concurrent Request
      operationId: countAnnotationsByConcurrentRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConcurrentRequest'
      responses:
        '200':
          description: Concurrent Request Count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentRequestCount'
        '500':
          description: 'Counting Annotations by Concurrent Request only accepts a JSON body (i.e. Content-Type: application/json)'
      tags:
        - Annotation
  /annotations/concurrent:
    post:
      summary: Find Annotations by Concurrent Request
      description: Find Annotations by Concurrent Request
      operationId: findAnnotationsByConcurrentRequest
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
        - in: query
          name: offset
          required: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConcurrentRequest'
      responses:
        '200':
          description: Concurrent Request Annotations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
        '400':
          description: 'Finding Annotations by Concurrent Request only accepts a JSON body (i.e. Content-Type: application/json)'
      tags:
        - Annotation
  /annotations/multi/count:
    post:
      summary: Count Annotations by Multi Request
      description: Count Annotations by Multi Request
      operationId: countAnnotationsByMultiRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiRequest'
      responses:
        '200':
          description: Multi Request Count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiRequestCount'
        '500':
          description: 'Counting Annotations by Multi Request only accepts a JSON body (i.e. Content-Type: application/json)'
      tags:
        - Annotation
  /annotations/multi:
    post:
      summary: Find Annotations by Multi Request
      description: Find Annotations by Multi Request
      operationId: findAnnotationsByMultiRequest
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
        - in: query
          name: offset
          required: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiRequest'
      responses:
        '200':
          description: Multi Request Annotations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
        '400':
          description: 'Finding Annotations by Multi Request only accepts a JSON body (i.e. Content-Type: application/json)'
      tags:
        - Annotation
  '/annotations/videoreference/chunked/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: Video Reference UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get chunked Annotations for a given Video Reference
      description: Get chunked Annotations for a given Video Reference
      operationId: findChunkedAnnotationsByVideoReference
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: pagesize
          description: 'default: 50'
          schema:
            type: integer
        - in: query
          name: timeout
          description: 'default: 20 (seconds)'
          schema:
            type: integer
      responses:
        '200':
          description: Chunked Annotations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
      tags:
        - Annotation
  /annotations/tapetime:
    put:
      summary: Bulk update Annotations recorded timestamp only
      description: Bulk update Annotations recorded timestamp only
      operationId: updateAnnotationsBulkRecordedTimestampOnly
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
      responses:
        '200':
          description: Updated Annotations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
        '400':
          description: 'Bulk update Annotations recorded timestamp only accepts JSON body (Content-Type: application/json)'
      tags:
        - Annotation
      security:
        - BearerAuth: []
  /ancillarydata:
    post:
      summary: Create a new Cached Ancillary Datum
      description: Create a new Cached Ancillary Datum
      operationId: createCachedAncillaryDatum
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                imaged_moment_uuid:
                  type: string
                  format: uuid
                latitude:
                  type: number
                  format: double
                longitude:
                  type: number
                  format: double
                depth_meters:
                  type: number
                  format: double
                altitude_meters:
                  type: number
                  format: double
                crs:
                  type: string
                salinity:
                  type: number
                  format: double
                oxygen:
                  type: number
                  format: double
                temperature_celsius:
                  type: number
                  format: double
                pressure_dbar:
                  type: number
                  format: double
                light_transmission:
                  type: number
                  format: double
                x:
                  type: number
                  format: double
                'y':
                  type: number
                  format: double
                z:
                  type: number
                  format: double
                pose_position_units:
                  type: string
                phi:
                  type: number
                  format: double
                theta:
                  type: number
                  format: double
                psi:
                  type: number
                  format: double
              required:
                - imaged_moment_uuid
                - latitude
                - longitude
                - depth_meters
      responses:
        '200':
          description: New Cached Ancillary Datum
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CachedAncillaryDatum'
      tags:
        - AncillaryDatum
      security:
        - BearerAuth: []
  '/ancillarydata/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: Cached Ancillary Datum UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Find a Cached Ancillary Datum by its UUID
      description: Find a Cached Ancillary Datum by its UUID
      operationId: findCachedAncillaryDatumByUuid
      responses:
        '200':
          description: Matched Cached Ancillary Datum
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CachedAncillaryDatum'
        '400':
          description: Please provide a Cached Ancillary Datum UUID
        '404':
          description: No matching Cached Ancillary Datum found
      tags:
        - AncillaryDatum
    put:
      summary: Update a Cached Ancillary Datum
      description: Update a Cached Ancillary Datum
      operationId: updateCachedAncillaryDatum
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                latitude:
                  type: number
                  format: double
                longitude:
                  type: number
                  format: double
                depth_meters:
                  type: number
                  format: double
                altitude_meters:
                  type: number
                  format: double
                crs:
                  type: string
                salinity:
                  type: number
                  format: double
                oxygen:
                  type: number
                  format: double
                temperature_celsius:
                  type: number
                  format: double
                pressure_dbar:
                  type: number
                  format: double
                light_transmission:
                  type: number
                  format: double
                x:
                  type: number
                  format: double
                'y':
                  type: number
                  format: double
                z:
                  type: number
                  format: double
                pose_position_units:
                  type: string
                phi:
                  type: number
                  format: double
                theta:
                  type: number
                  format: double
                psi:
                  type: number
                  format: double
      responses:
        '200':
          description: Updated Cached Ancillary Datum
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CachedAncillaryDatum'
        '400':
          description: A Cached Ancillary Datum UUID is required
        '404':
          description: No matching Cached Ancillary Datum found
      tags:
        - AncillaryDatum
      security:
        - BearerAuth: []
  '/ancillarydata/videoreference/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: Video Reference UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Find Cached Ancillary Data for a Video Reference
      description: Find Cached Ancillary Data for a Video Reference
      operationId: findCachedAncillaryDataByVideoReference
      responses:
        '200':
          description: List of matched Cached Ancillary Data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CachedAncillaryDatum'
        '400':
          description: Please provide a Video Reference UUID
        '404':
          description: No matching Cached Ancillary Data found
      tags:
        - AncillaryDatum
    delete:
      summary: Delete all Cached Ancillary Data for a video
      description: Delete all Cached Ancillary Data for a video
      operationId: deleteCachedAncillaryDataByVideoReference
      responses:
        '200':
          description: Count of deleted Cached Ancillary Data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationCount'
        '400':
          description: A Video Reference UUID is required
      tags:
        - AncillaryDatum
      security:
        - BearerAuth: []
  '/ancillarydata/imagedmoment/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: Imaged Moment UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Find a Cached Ancillary Datum by its Imaged Moment
      description: Find a Cached Ancillary Datum by its Imaged Moment
      operationId: findCachedAncillaryDatumByImagedMoment
      responses:
        '200':
          description: Matched Cached Ancillary Datum
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CachedAncillaryDatum'
        '400':
          description: Please provide an Imaged Moment UUID
        '404':
          description: No matching Cached Ancillary Datum found
      tags:
        - AncillaryDatum
  '/ancillarydata/observation/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: Observation UUID
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Find a Cached Ancillary Datum by its Observation
      description: Find a Cached Ancillary Datum by its Observation
      operationId: findCachedAncillaryDatumByObservation
      responses:
        '200':
          description: Matched Cached Ancillary Datum
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CachedAncillaryDatum'
        '400':
          description: Please provide an Observation UUID
        '404':
          description: No matching Cached Ancillary Datum found
      tags:
        - AncillaryDatum
  /ancillarydata/bulk:
    post:
      summary: Create or update Cached Ancillary Data in bulk
      description: Create or update Cached Ancillary Data in bulk
      operationId: createOrUpdateCachedAncillaryDataBulk
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CachedAncillaryDatum'
      responses:
        '200':
          description: Created/updated Cached Ancillary Data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CachedAncillaryDatum'
      tags:
        - AncillaryDatum
      security:
        - BearerAuth: []
  '/ancillarydata/merge/{uuid}':
    parameters:
      - in: path
        name: uuid
        description: Video Reference UUID
        required: true
        schema:
          type: string
          format: uuid
    put:
      summary: Merge Cached Ancillary Data into a video
      description: Merge Cached Ancillary Data into a video
      operationId: mergeCachedAncillaryData
      parameters:
        - in: query
          name: window
          description: 'time window in milliseconds (default: 7500)'
          schema:
            type: integer
      responses:
        '200':
          description: Merged Cached Ancillary Data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CachedAncillaryDatum'
        '400':
          description: 'Merging Cached Ancillary Data into a video only accepts a JSON body (i.e. Content-Type: application/json)'
      tags:
        - AncillaryDatum
      security:
        - BearerAuth: []
  /health:
    get:
      summary: Get health status
      description: Get health status
      operationId: getHealth
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
      tags:
        - Health
  /imagedmoments/videoreference:
    get:
      summary: Find all Video Reference UUIDs with Imaged Moments
      tags:
        - ImagedMoment
      responses:
        '200':
          description: Video Reference UUIDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
      operationId: findAllVideoReferenceUUIDsWithImagedMoments
      description: Find all Video Reference UUIDs with Imaged Moments
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: Max number of results
        - schema:
            type: integer
          in: query
          name: offset
          description: Number of results to skip from the beginning
  '/imagedmoments/videoreference/{uuid}':
    get:
      summary: Find all Video Reference UUIDs
      tags:
        - ImagedMoment
      responses:
        '200':
          description: Matched Imaged Moments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImagedMoment'
        '400':
          description: Please provide a Video Reference UUID
      operationId: findImagedMomentsByVideoReferenceAlt
      description: Find Imaged Moments for a given Video Reference
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: Max number of results
        - schema:
            type: integer
          in: query
          name: offset
          description: Number of results to skip from the beginning
    parameters:
      - schema:
          type: string
          format: uuid
        name: uuid
        in: path
        required: true
        description: Video Reference UUID
    delete:
      summary: Delete Imaged Moments by Video Reference
      operationId: deleteImagedMomentsByVideoReference
      responses:
        '200':
          description: Count of deleted Imaged Moments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationCount'
        '400':
          description: Please provide a Video Reference UUID
      description: Delete all Imaged Moments for a given Video Reference
      security:
        - BearerAuth: []
      parameters: []
      tags:
        - ImagedMoment
  /imagedmoments/windowrequest:
    post:
      summary: Find Imaged Moments by window request
      tags:
        - ImagedMoment
      responses:
        '200':
          description: Matched Imaged Moments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImagedMoment'
        '400':
          description: Only JSON accepted
      operationId: findImagedMomentsByWindowRequest
      description: Find Imaged Moments by window request
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
          description: Maximum number of results
        - schema:
            type: integer
          in: query
          name: offset
          description: Number of results to skip from beginning
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowRequest'
        description: Window request
  '/imagedmoments/imagereference/{uuid}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: uuid
        in: path
        required: true
        description: Image Reference UUID
    get:
      summary: Find Imaged Moment by Image Reference
      tags:
        - ImagedMoment
      responses:
        '200':
          description: Matched Imaged Moment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagedMoment'
        '400':
          description: Please provide an Image Reference UUID
        '404':
          description: No matching Image Reference found
      operationId: findImagedMomentByImageReference
      description: Find an Imaged Moment by a given Image Reference
  '/imagedmoments/observation/{uuid}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: uuid
        in: path
        required: true
        description: Observation UUID
    get:
      summary: Find Imaged Moment by Observation
      tags:
        - ImagedMoment
      responses:
        '200':
          description: Matched Imaged Moment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagedMoment'
        '400':
          description: Please provide an Observation UUID
        '404':
          description: No matching Observation found
      operationId: findImagedMomentByObservation
      description: Find an Imaged Moment by a given Observation
  '/imagedmoments/newtime/{uuid}/{time}':
    parameters:
      - schema:
          type: string
        name: uuid
        in: path
        required: true
        description: Video Reference UUID
      - schema:
          type: string
          format: date-time
        name: time
        in: path
        required: true
        description: New start time
    put:
      summary: Update Imaged Moment timestamps for a Video Reference
      tags:
        - ImagedMoment
      responses:
        '200':
          description: Updated Imaged Moments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImagedMoment'
      operationId: updateImagedMomentRecordedTimestamps
      description: 'Update the recorded timestamps for all Imaged Moments for a given Video Reference, given a new start timestamp'
      security:
        - BearerAuth: []
  /imagedmoments/tapetime:
    put:
      summary: Bulk update Annotation timestamps
      tags:
        - ImagedMoment
      responses:
        '200':
          description: Count of Annotations and timestamps updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  annotation_count:
                    type: integer
                    description: Annotation count
                  timestamps_updated:
                    type: integer
                    description: Number of timestamps updated
        '400':
          description: JSON body required
      operationId: updateAnnotationTimestampsBulk
      description: Update Annotation timestamps in bulk. Each Annotation should have the observation\_uuid and recorded\_timestamp fields
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: APIKEY
  schemas:
    Authorization:
      description: JWT authorization
      type: object
      properties:
        token_type:
          description: The type of the token. Normally it will be 'Bearer'
          type: string
        access_token:
          description: The JWT token
          type: string
    Annotation:
      description: A single annotation
      type: object
      required:
        - observation_uuid
        - concept
        - video_reference_uuid
      properties:
        observation_uuid:
          description: uuid for the observation
          type: string
          format: uuid
        concept:
          description: The name of the object/annotation in the video
          type: string
          example: Pandalus platyceros
        observer:
          description: The person who created or last modified the annotation
          type: string
          example: brian
        observation_timestamp:
          description: The date/time that the annotation was made
          type: string
          format: date-time
        video_reference_uuid:
          description: The uuid of the video that this annotation belongs to
          type: string
          format: uuid
        imaged_moment_uuid:
          description: The uuid for the imaged-moment for this video
          type: string
          format: uuid
        timecode:
          description: Video timecode of the annotation (1 of 3 possible video indices)
          type: string
          example: '00:02:34:21'
        elapsed_time_millis:
          description: Elapsed time from the start of the video for this annotation (1 of 3 possible video indices)
          type: integer
          example: 1234578
        recorded_timestamp:
          description: The date that the frame of video containing the annotation was recorded (1 of 3 possible video indices)
          type: string
          format: date-time
        duration_millis:
          description: The length of time (in milliseconds) that the concept in this annotation was observed
          type: integer
          example: 1500
        group:
          description: 'A logical grouping for this annotation. At MBARI we use platforms (ROV, AUV, etc) but this can be anything that is appropriate for your use case'
          type: string
          example: 'ROV:detailed'
        activity:
          description: 'The activity that was occuring while the video was recorded. For example for our ROV''s we use descend, ascend, transect. But, like group, use whatever is appropriate for your needs.'
          type: string
          example: transect
        associations:
          type: array
          items:
            $ref: '#/components/schemas/Association'
        image_references:
          type: array
          items:
            $ref: '#/components/schemas/ImageReference'
    Association:
      description: Additional descriptive information associated with the annotation
      type: object
      required:
        - link_name
      properties:
        uuid:
          description: The primary key
          type: string
          format: uuid
        link_name:
          type: string
          example: eating
        to_concept:
          type: string
          example: Grimpoteuthis
        link_value:
          type: string
          example: nil
        mime_type:
          description: The mime-type of the data stored in link_value. Most common are 'plain/text' and 'application/json'
          type: string
          example: text/plain
        last_upated_time:
          description: The time of last modification
          type: string
          format: date-time
    CachedAncillaryDatum:
      description: Ancillary data at this moment of video
      type: object
      properties:
        uuid:
          description: The primary key
          type: string
          format: uuid
        imaged_moment_uuid:
          description: UUID to the imagedmoment. This is used when uploading data to the bulk create or update API.
          type: string
          format: uuid
        latitude:
          description: Latitude of video sample
          type: number
        longitude:
          description: Longitude of video sample
          type: number
        depth_meters:
          description: Depth of video sample
          type: number
        altitude:
          description: Altitude of ocean bottom
          type: number
        crs:
          description: Co-ordinate reference system. Indicates how lat and lon ar calculated
          type: string
        salinity:
          description: Salinity
          type: number
        temperature_celsius:
          description: temperature in celsius
          type: number
        oxygen_ml_l:
          description: Oxygen (ml/L)
          type: number
        light_transmission:
          description: light transmission through water
          type: number
        x:
          description: camera coordinate system (x). Arbitrary!! Users choice
          type: number
        'y':
          description: camera coordinate system (y). Arbitrary!! Users choice
          type: number
        z:
          description: camera coordinate system (z). Arbitrary!! Users choice
          type: number
        pose_position_units:
          description: 'The units of x, y, and z'
          type: string
        phi:
          description: 'roll in radians, airplane coordinate system'
          type: number
        theta:
          description: 'pitch in radians, airplne coordinate system'
          type: number
        psi:
          description: 'tilt in radians, airplane coordinate system'
          type: number
        last_upated_time:
          description: The time of last modification
          type: string
          format: date-time
    CachedVideoReferenceInfo:
      description: Metadata about a video reference
      type: object
      properties:
        uuid:
          description: The primary key
          type: string
          format: uuid
        video_reference_uuid:
          description: The uuid of the video that this image belongs to
          type: string
          format: uuid
        platform_name:
          description: The name of the camera platform used to collect the video
          type: string
          example: Ventana
        mission_id:
          description: Id for the mission during which this video was collected
          type: string
        mission_contact:
          description: The contact name (e.g. chief scientist) for this mission
          type: string
        last_upated_time:
          description: The time of last modification
          type: string
          format: date-time
    ConceptCount:
      description: The number of concepts found
      type: object
      required:
        - concept
        - count
      properties:
        concept:
          description: The concept that was queried
          type: string
          example: Nanomia bijuga
        count:
          description: The number of usages of this concept found in the datastore
          type: integer
    ConceptRename:
      description: The count of renamed concepts
      type: object
      required:
        - old_name
        - new_name
        - count
      properties:
        old_concept:
          description: The name of the concept before it was renamed
          type: string
        new_concept:
          description: The name of the concept after it was renamed
          type: string
        number_updated:
          description: The number of concepts renamed from 'old' to 'new'
          type: integer
    ImageReference:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        url:
          description: The URL of the image
          type: string
          format: url
          example: 'http://search.mbari.org/ARCHIVE/frameGrabs/Doc%20Ricketts/images/0953/00_00_00_00.png'
        format:
          description: The mime-type of the image
          type: string
          example: image/png
        width:
          description: The image width in pixels
          type: integer
          example: 1920
        height:
          description: The image height in pixels
          type: integer
          example: 1080
        description:
          description: The image type description
          type: string
          example: uncompressed image
        last_upated_time:
          description: The time of last modification
          type: string
          format: date-time
    Image:
      type: object
      properties:
        image_reference_uuid:
          description: The primary key
          type: string
          format: uuid
        format:
          description: The mime-type
          type: string
          example: image/jpg
        width:
          description: The image width in pixels
          type: integer
          example: 1920
        height:
          description: The image height in pixels
          type: integer
          example: 1080
        url:
          description: The image location
          type: string
          format: url
          example: 'http://search.mbari.org/ARCHIVE/framegrabs/Ventana/images/Ventana%204099/349949-eeb04dbb-d2b1-496e-9980-d3bc8208b897.jpg'
        description:
          description: A free-text description about the image.
          type: string
          example: Compressed image
        video_reference_uuid:
          description: The uuid of the video that this image belongs to
          type: string
          format: uuid
        imaged_moment_uuid:
          description: The uuid for the imaged-moment for this video
          type: string
          format: uuid
        timecode:
          description: Video timecode of the annotation (1 of 3 possible video indices)
          type: string
          example: '00:02:34:21'
        elapsed_time_millis:
          description: Elapsed time from the start of the video for this annotation (1 of 3 possible video indices)
          type: integer
          example: 1234578
        recorded_timestamp:
          description: The date that the frame of video containing the annotation was recorded (1 of 3 possible video indices)
          type: string
          format: date-time
    ImagedMoment:
      type: object
      properties:
        uuid:
          description: The primary key
          type: string
          format: uuid
        video_reference_uuid:
          description: The uuid of the video that this annotation belongs to
          type: string
          format: uuid
        timecode:
          description: Video timecode of the annotation (1 of 3 possible video indices)
          type: string
          example: '00:02:34:21'
        elapsed_time_millis:
          description: Elapsed time from the start of the video for this annotation (1 of 3 possible video indices)
          type: integer
          example: 1234578
        recorded_timestamp:
          description: The date that the frame of video containing the annotation was recorded (1 of 3 possible video indices)
          type: string
          format: date-time
        last_upated_time:
          description: The time of last modification
          type: string
          format: date-time
        observations:
          description: The observations (i.e annotations) associated with this moment
          type: array
          items:
            $ref: '#/components/schemas/Observation'
        imageReferences:
          description: The images associated with this moment
          type: array
          items:
            $ref: '#/components/schemas/ImageReference'
        ancillary_datum:
          allOf:
            - $ref: '#/components/schemas/CachedAncillaryDatum'
          description: Metadata about position and environment
    ImagedMomentCount:
      type: object
      properties:
        start_timestamp:
          description: The start date
          type: string
          format: date-time
        end_timestamp:
          description: The end date
          type: string
          format: date-time
        count:
          description: The number of modified imagedmoments/observations between the dates
          type: integer
          example: 99
    Observation:
      type: object
      properties:
        uuid:
          description: The primary key
          type: string
          format: uuid
        concept:
          description: the name of the annotation
          type: string
          example: Nanomia bijuga
        duration_millis:
          description: The observation duration in milliseconds
          type: integer
          example: 12300
        observation_timestamp:
          description: The date/time the annotation was made
          type: string
          format: date-time
        observer:
          description: The person who made the observation
          type: string
          example: Brian Schlining
        group:
          description: A logical group that the observation belongs to
          type: string
          example: ROV
        activity:
          description: Some logical grouping based on an action or activity that was occuring while the video was recorded
          type: string
          example: transect
        last_upated_time:
          description: The time of last modification
          type: string
          format: date-time
        associations:
          type: array
          items:
            $ref: '#/components/schemas/Association'
    ObservationCount:
      type: object
      properties:
        video_reference_uuid:
          description: the primary key
          type: string
          format: uuid
        count:
          description: The number of annotations in a video
          type: integer
          example: 99
    ConceptAssociation:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        video_reference_uuid:
          type: string
          format: uuid
        concept:
          type: string
        link_name:
          type: string
        to_concept:
          type: string
        link_value:
          type: string
        mime_type:
          type: string
    ConceptAssociationRequest:
      type: object
      properties:
        link_name:
          type: string
          example: eating
        video_reference_uuids:
          type: array
          items:
            type: string
            format: uuid
    ConceptAssociationResponse:
      type: object
      properties:
        concept_association_request:
          $ref: '#/components/schemas/ConceptAssociationRequest'
        concept_associations:
          type: array
          items:
            $ref: '#/components/schemas/ConceptAssociation'
    QueryConstraints:
      type: object
      properties:
        concepts:
          type: array
          items:
            type: string
            example: Vampyroteuthis
        observers:
          type: array
          items:
            type: string
            example: Brian Schlining
        groups:
          type: array
          items:
            type: string
        activities:
          type: array
          items:
            type: string
        min_depth:
          type: number
          format: double
        max_depth:
          type: number
          format: double
        min_lat:
          type: number
          format: double
        max_lat:
          type: number
          format: double
        min_lon:
          type: number
          format: double
        max_lon:
          type: number
          format: double
        min_imestamp:
          type: string
          format: date-time
        max_timestamp:
          type: string
          format: date-time
        link_name:
          type: string
        link_value:
          type: string
        limit:
          type: integer
          description: 'Limit (default: 5000)'
        offset:
          type: integer
          description: 'Offset (default: 0)'
        data:
          type: boolean
        mission_contacts:
          type: array
          items:
            type: string
            example: Bruce Robison
        platform_name:
          type: string
          example: Doc Ricketts
        mission_id:
          type: string
          example: Doc Ricketts 0001
    QueryConstraintsResponse:
      type: object
      properties:
        query_constraints:
          $ref: '#/components/schemas/QueryConstraints'
        content:
          type: object
    DepthHistogram:
      type: object
      properties:
        bins_min:
          type: array
          items:
            type: integer
        bins_max:
          type: array
          items:
            type: integer
        values:
          type: array
          items:
            type: integer
    TimeHistogram:
      type: object
      properties:
        bins_min:
          type: array
          items:
            type: string
            format: date-time
        bins_max:
          type: array
          items:
            type: string
            format: date-time
        values:
          type: array
          items:
            type: integer
    ConcurrentRequest:
      type: object
      properties:
        start_timestamp:
          type: string
          format: date-time
        end_timestamp:
          type: string
          format: date-time
        video_reference_uuids:
          type: array
          items:
            type: string
            format: uuid
    ConcurrentRequestCount:
      type: object
      properties:
        concurrent_request:
          $ref: '#/components/schemas/ConcurrentRequest'
        count:
          type: integer
    MultiRequest:
      type: object
      properties:
        video_reference_uuids:
          type: array
          items:
            type: string
            format: uuid
    MultiRequestCount:
      type: object
      properties:
        concurrent_request:
          $ref: '#/components/schemas/MultiRequest'
        count:
          type: integer
    HealthStatus:
      type: object
      properties:
        jdkVersion:
          type: string
          example: 17.02.2+8-86
        availableProcessors:
          type: integer
          example: 4
        freeMemory:
          type: integer
          example: 47837936
        maxMemory:
          type: integer
          example: 4294967296
        totalMemory:
          type: integer
          example: 71303168
        application:
          type: string
          example: annosaurus
        version:
          type: string
          example: 0.12.11
        description:
          type: string
          example: Annotation Service
    WindowRequest:
      title: WindowRequest
      type: object
      properties:
        video_reference_uuids:
          type: array
          description: Video Reference UUIDs
          items:
            type: string
            format: uuid
        imaged_moment_uuid:
          type: string
          format: uuid
          description: Imaged Moment UUID
        window:
          type: integer
          description: Window size in milliseconds
      description: Window request
